# Trabalho de Sistemas Operacionais 2020.2

Professor: Danilo Alves Oliveira

Alunos: Lais de  F√°tima Sousa Gomes (matr√≠cula 504405) e Danilo Paiva Alves (matr√≠cula 418121)


Quest√£o 1: (1 pt) Fa√ßa um programa que leia um n√∫mero ‚Äún‚Äù informado pelo usu√°rio e diga quantos n√∫meros primos h√° entre 0 e ‚Äún‚Äù. Esse seu programa deve rodar em 2 threads, de forma que o esfor√ßo computacional seja uniformemente dividido entre os threads.

Quest√£o 2: (1 pt) Podemos calcular o seno de um n√∫mero segundo a s√©rie de Taylor-Maclaurin:
ùë†ùëíùëõ(ùë•)=ùë•‚àíùë•33!+ùë•55!‚àíùë•77!+ùë•99!‚àí‚ãØ
Fa√ßa um programa em C que l√™ um valor para xe c√°lculo o valor de Sen (x) utilizando duas linhas para dividir os c√°lculos, uma para os termos com soma e outra para os com subtra√ß√£o. O valor deve ser calculado at√© ser pr√≥ximo do seno.

Quest√£o 03: (2 pt) Implemente os processos em ambiente Linux:
a) Crie um programa em C que demonstre uma hierarquia de processos com o comando fork( ) -> Pai -> Filho ->Filho1.
b) Crie um programa que receba par√¢metros na chamada do main e mostre na sa√≠da metade dos par√¢metros pelo processo pai e a outra metade pelo processo filho.

Quest√£o 4: (Especial COVID) (2 pt) Desenvolva um algoritmo que simule o cont√°gio do coronav√≠rus de uma forma simples. Suponha que cada pessoa infectada possa infectar somente 4 pessoas ao seu redor e que n√£o necessariamente existem pessoas pr√≥ximas, isso depende da taxa de isolamento que o grupo de pessoas est√° seguindo. Os dados que voc√™ deve solicitar ao usu√°rio s√£o: tamanho do espa√ßo amostral, taxa de isolamento e n√∫mero de infectados iniciais.
O tamanho do espa√ßo amostral deve ser uma matriz N x M, criada dinamicamente. A taxa de isolamento deve ser usada para calcular a quantidade de valores vazios presentes no espa√ßo amostral, o valor vazio indica uma dist√¢ncia entre as pessoas. Utilize valor 1 na matriz para indicar as pessoas, valor 0 para indicar espa√ßo vazio devido o isolamento e 2 para indicar contaminados. Por exemplo, suponha que voc√™ tem uma matriz 4 x 4 com taxa de isolamento de 0.40, isso indica que 40% dos valores dessa matriz s√£o de espa√ßos vazios, aproximando ter√≠amos 6 espa√ßos vazios e 10 pessoas nesse espa√ßo amostral. A distribui√ß√£o das posi√ß√µes de pessoas e espa√ßos vazios na matriz deve ser feito de forma aleat√≥ria, respeitando as quantidades obtidas pela taxa de isolamento e tamanho da matriz. A quantidade de infectados iniciais diz
respeito ao inicio da contamina√ß√£o dentro desse espa√ßo, para facilitar limite ao m√°ximo 4 infectados iniciais, a posi√ß√£o desses infectados deve ser obtida aleatoriamente. A contamina√ß√£o deve ser feita por intera√ß√µes, sempre atualizando os valores da matriz a cada itera√ß√£o. Cada infectado pode contaminar apenas as 4 pessoas ao seu redor em uma intera√ß√£o, as pessoas que foram contaminadas na intera√ß√£o anterior passam a contaminar as 4 pr√≥ximas que est√£o ao seu redor e isso se repete ao longo das intera√ß√µes at√© infectar todos os poss√≠veis de acordo com o isolamento. Por exemplo, suponha a matriz 5 x 5 abaixo com taxa de isolamento de 0.4 e com somente um infectado inicial:
Observe que s√£o apresentados nas matrizes os infectados (vermelho) e seus vizinhos que ser√£o infectados na pr√≥xima intera√ß√£o (verde). Observe tamb√©m que a presen√ßa dos espa√ßos vazios 0 impedem a propaga√ß√£o da contamina√ß√£o, evitando o contato entre as pessoas na matriz. Em cada itera√ß√£o devem ser verificados os 4 vizinhos de cada infectado, buscando os pr√≥ximos a serem contaminados na itera√ß√£o seguinte e isso prossegue at√© atingir o m√°ximo poss√≠vel. Suponha um contaminado na posi√ß√£o (i, j), na pr√≥xima itera√ß√£o os contaminados ser√£o as posi√ß√µes (i+1, j), (i, j-1), (i-1, j) e (i, j+1) que tenham valores 1.
O programa finaliza quando n√£o tiverem mais infectados em uma itera√ß√£o e deve ser apresentado na sa√≠da o print das matrizes em cada itera√ß√£o e quando finalizar o resumo da infec√ß√£o: Espa√ßo amostral simulado, taxa de isolamento, quantidade de infectados iniciais, porcentagem da popula√ß√£o contaminada ao final, porcentagem da popula√ß√£o saud√°vel e quantidade de itera√ß√µes que foram precisas.
Obs: O programa deve utilizar threads para resolu√ß√£o. Deixarei livre para utilizarem a criatividade de como aplicar threads nessa problem√°tica

Quest√£o 5: (2 pt) Crie um programa em C que apresente duas fun√ß√µes para threads (produtor e consumidor), nesse devem ser criadas a quantidade de threads definidas por uma vari√°vel global QTD e utilizar outra vari√°vel global chamada ‚Äúvalor‚Äù. O produtor s√≥ pode produzir um n√∫mero se essa vari√°vel tiver sido consumida (valor=0), quando ele for produzir √© atribu√≠do um n√∫mero aleat√≥rio a vari√°vel ‚Äúvalor‚Äù. O consumido s√≥ pode consumir um n√∫mero, se ele j√° tiver sido produzido (valor‚â†0), quando ele consome √© atribu√≠do valor=0. O programa deve seguir as seguintes especifica√ß√µes:
- A fun√ß√£o produtor e consumidor devem receber o id da thread como par√¢metro no momento de sua cria√ß√£o.
- O produtor deve produzir um n√∫mero aleat√≥rio menor que 100 e armazenar na vari√°vel ‚Äúvalor‚Äù. Ap√≥s produzir esse n√∫mero deve apresentar a mensagem "produtor
%d: produziu %d", onde o primeiro campo √© o id da thread e o segundo √© o valor aleat√≥rio que foi obtido.
- Essa mensagem e o processo de obten√ß√£o do valor devem estar dentro do loop do produtor, logo a verifica√ß√£o da vari√°vel "valor" deve ser dentro do loop. Utilize um valor alto para o n√∫mero de itera√ß√µes nesse la√ßo de repeti√ß√£o.
- Ao sair do loop, seja do produtor ou consumido, finalize a thread.
- O consumidor deve apresentar a mensagem "consumidor %d: consumiu %d", onde o primeiro campo √© o numero do processo e o segundo √© o valor da vari√°vel compartilhada "valor", que foi produzido aleatoriamente pelo processo produtor.
- Essa mensagem deve est√° dentro do loop do consumidor, logo a verifica√ß√£o da vari√°vel "valor" deve ser dentro do loop.
- Caso a vari√°vel "valor" seja diferente de zero, ent√£o ele apresenta essa mensagem, e deve alterar o valor da vari√°vel "valor" para zero (valor=0).
- Crie 4 pares de threads com esses processos (4 threads para consumidores e 4 threads para produtores).
- Execute os threads algumas vezes, observe as sa√≠das e responda as observa√ß√µes:
3.1-Por que alguns consumidores consumiram mais de uma vez em seguida o mesmo n√∫mero?
3.2-Por que o consumidor consumiu um determinado n√∫mero, mas o produtor s√≥ o produziu depois?
3.3-Tirando o fato de ser gerado n√∫meros aleat√≥rios, por que a execu√ß√£o sempre ocorre em ordem diferente?

Quest√£o 6: (2 pt) Implemente uma simula√ß√£o para os algoritmos de escalonamento SJF e Round Robin em C. Em sua implementa√ß√£o o usu√°rio deve fornecer a quantidade de processos que est√£o na fila para serem executados, a ordem de chegada e o tempo de execu√ß√£o de cada processo. Durante a execu√ß√£o deve ser informado ao usu√°rio qual o processo que est√° executando e esperado o tempo de cada processo por segundo. Por exemplo, se um processo A demora 5 segundos, deve ser informado que ele est√° sendo trabalhado e esperado o tempo de execu√ß√£o deste para poder iniciar o pr√≥ximo, para isso utilize um temporizador em seu algoritmo.
